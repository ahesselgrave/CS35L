I used gpg --gen-key to create an RSA key pair. I exported the public key using
gpg --armor --output hw-pubkey.asc --export Alex Hesselgrave.

Q1)  Suppose the other teams really had been observing all the bytes going
across the network. Is your resulting network still secure? If so, explain why,
and explain whether your answer would change if (1) you assumed the other teams
had also tapped your keyboards and had observed all of your team's keystrokes,
or (2) you are booting off USB and you assume the other teams temporarily had
physical control of the USB. If not, explain any weaknesses of your team's
setups, focusing on possible attacks by such outside observers.


A1)  Since they saw every byte going across the network, they would have had
access to the private keys, thus making the network insecure. If they had also
tapped into the keystrokes, they would know what our passphrase for the private
keys would be as well. If we booted off of USB and they had control of the USB,
they could extract the key file in the .ssh directory. 

Q2)  Explain why the gpg --verify command in the following instructions doesn't
really verify that you personally created the tar file in question. How would
you go about fixing this problem?

A2)  gpg --verify only goes off any changes in the signature but not any changes
in the file content. Even if the file is modified but the signature is intact,
gpg --verify will clear it. One way to remedy it is to force a signature change
whenever the file is modified. 
